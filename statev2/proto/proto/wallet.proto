/// Defines wallet management messages and types
syntax = "proto3";
package state;

import "common.proto";

// ---------
// | Types |
// ---------

/// The side of an order
enum OrderSide {
    /// Buy side
    BUY = 0;
    /// Sell side
    SELL = 1;
}

/// The order type 
message Order {
    /// The ID of the order
    ProtoUuid id = 1;
    /// The mint of the quote token 
    ProtoBigInt quote_mint = 2;
    /// The mint of the base token
    ProtoBigInt base_mint = 3;
    /// The side of the order
    OrderSide side = 4;
    /// The amount of the order
    uint64 amount = 5;
    /// The worst case price that the user is willing to accept on this order
    double worst_case_price = 6;
    /// A timestamp indicating when the order was placed
    uint64 timestamp = 7;
}

/// The balance type 
message Balance {
    /// The mint of the token this balance represents
    ProtoBigInt mint = 1;
    /// The amount held by the balance
    uint64 amount = 2;
}

/// The fee type
///
/// TODO: Remove this after fee implementation in favor of new design
message Fee {
    /// The public settle key of the cluster collecting fees
    ProtoBigInt settle_key = 1;
    /// The mint of the token used 
    ProtoBigInt gas_addr = 2;
    /// The amount of gas authorized on a given match
    uint64 gas_amount = 3;
    /// The percentage fee that may be taken on a match
    double percentage_fee = 4;
}

/// The public keychain, represents the public keys for wallet operations
message PublicKeyChain {
    /// The serialization of the public root key
    bytes pk_root = 1;
    /// The serialization of the public match key
    ProtoScalar pk_match = 2;
}

/// The secret keychain, represents the secret keys for wallet operations
message PrivateKeyChain {
    /// The serialization of the secret root key
    bytes sk_root = 1;
    /// The serialization of the secret match key
    ProtoScalar sk_match = 2;
}

/// The keychain type, representing both public and secret keys for wallet operations
message KeyChain {
    /// The public wallet keys
    PublicKeyChain public_keys = 1;
    /// The secret wallet keys
    PrivateKeyChain secret_keys = 2;
}

/// The metadata about the wallet's state in the p2p net
message WalletMetadata {
    /// The peers replicating the wallet
    repeated PeerId replicas = 1;
}

/// A wallet's authentication path in the Merkle tree
message WalletAuthenticationPath {
    /// The siblings to each node in the wallet commitment's insertion path
    repeated ProtoScalar path_siblings = 1;
    /// The index in which the wallet commitment was inserted
    uint64 leaf_index = 2;
    /// The value of the commitment
    ProtoScalar value = 3;
}

/// The wallet type as it is indexed in the global state
message Wallet {
    /// The ID of the wallet
    ProtoUuid id = 1;
    /// The orders in the wallet
    repeated Order orders = 2;
    /// The balances in the wallet
    repeated Balance balances = 3;
    /// The fees authorized by the wallet
    repeated Fee fees = 4;
    /// The wallet's keychain
    KeyChain keychain = 5;
    /// The wallet blinder 
    ProtoScalar blinder = 6;
    /// The private shares of the wallet
    repeated ProtoScalar private_shares = 7;
    /// The blinded public shares of the wallet
    repeated ProtoScalar blinded_public_shares = 8;
    /// The wallet's authentication path
    WalletAuthenticationPath opening = 9;
}

// -------------
// | Interface |
// -------------

/// Add wallets to the global state
message AddWallet {
    /// The wallets to add
    Wallet wallets = 1;
}

/// Update a wallet in the global state
message UpdateWallet {
    /// The wallets to update
    Wallet wallet = 1;
}
