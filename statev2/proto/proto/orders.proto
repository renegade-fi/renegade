/// Defines orderbook metadata message types
syntax = "proto3";
package state;

import "common.proto";

// ---------
// | Types |
// ---------

/// The state of the order in the network
enum NetworkOrderState {
    /// The received state indicates that the local node knows about the order, but
    /// has not received a proof of `VALID COMMITMENTS` to indicate that this order
    /// is a valid member of the state tree
    ///
    /// Orders in the received state cannot yet be matched against
    Received = 0;
    /// The verified state indicates that a proof of `VALID COMMITMENTS` has been received
    /// and verified by the local node
    ///
    /// Orders in the Verified state are ready to be matched
    Verified = 1;
    /// A cancelled order is invalidated because a nullifier for the wallet was submitted
    /// on-chain
    Cancelled = 2;
}

/// An order that has been allocated in the network
message NetworkOrder {
    /// The order's ID
    ProtoUuid id = 1;
    /// The public shares nullifier of the wallet holding this order
    ProtoScalar nullifier = 2;
    /// The cluster managing the order
    ClusterId cluster = 3;
    /// The state of the order in the network
    NetworkOrderState state = 4;
    /// The proof payload of `VALID COMMITMENTS` for this order
    /// and `VALID REBLIND` for the containing wallet
    bytes proof = 5;
}

// -------------
// | Interface |
// -------------

/// Add an order to the book
message AddOrder {
    /// The order to add
    NetworkOrder order = 1;
}

/// Add a validity proof for an order
message AddOrderValidityProof {
    /// The ID of the order to add a proof for
    ProtoUuid order_id = 1;
    /// The proof payload of `VALID COMMITMENTS` for this order
    /// and `VALID REBLIND` for the containing wallet
    bytes proof = 2;
}

/// Nullify all orders that are indexed by a given nullifier
message NullifyOrders {
    /// The nullifier to nullify orders by
    bytes nullifier = 1;
}