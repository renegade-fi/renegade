//! Helpers for managing tasks generated by the handshake manager

use common::types::tasks::{QueuedTask, TaskDescriptor};
use job_types::task_driver::TaskDriverJob;
use util::err_str;

use crate::error::HandshakeManagerError;

use super::HandshakeExecutor;

impl HandshakeExecutor {
    /// Enqueue a serial task and await its completion
    pub async fn forward_queued_task(
        &self,
        descriptor: TaskDescriptor,
    ) -> Result<(), HandshakeManagerError> {
        self.enqueue_task_await_completion(descriptor, false /* bypass_queue */).await
    }

    /// Enqueue a concurrent task and await its completion
    pub async fn forward_bypassing_task(
        &self,
        descriptor: TaskDescriptor,
    ) -> Result<(), HandshakeManagerError> {
        self.enqueue_task_await_completion(descriptor, true /* bypass_queue */).await
    }

    /// Enqueue a task and await its completion
    async fn enqueue_task_await_completion(
        &self,
        descriptor: TaskDescriptor,
        bypass_queue: bool,
    ) -> Result<(), HandshakeManagerError> {
        if bypass_queue {
            self.send_task_to_driver(descriptor).await
        } else {
            self.enqueue_task_through_raft(descriptor).await
        }
    }

    /// Enqueue a task through the raft task queue abstraction
    async fn enqueue_task_through_raft(
        &self,
        descriptor: TaskDescriptor,
    ) -> Result<(), HandshakeManagerError> {
        // Send the proposal to the raft
        let wallets = descriptor.affected_wallets();
        let (tid, waiter) =
            self.state.enqueue_preemptive_task(wallets, descriptor, true /* is_serial */).await?;
        waiter.await?;

        // Await a completion notification from the task driver
        let (job, rx) = TaskDriverJob::new_notification(tid);
        self.task_queue.send(job).map_err(err_str!(HandshakeManagerError::SendMessage))?;
        rx.await
            .map_err(err_str!(HandshakeManagerError::TaskError))? // RecvError
            .map_err(err_str!(HandshakeManagerError::TaskError)) // TaskDriverError
    }

    /// Enqueue a task directly to the task driver
    async fn send_task_to_driver(
        &self,
        descriptor: TaskDescriptor,
    ) -> Result<(), HandshakeManagerError> {
        // Send the task to the task driver
        let queued = QueuedTask::new(descriptor);
        let (job, rx) = TaskDriverJob::run_with_notification(queued);
        self.task_queue.send(job).map_err(err_str!(HandshakeManagerError::SendMessage))?;

        // Await a completion notification from the task driver
        rx.await
            .map_err(err_str!(HandshakeManagerError::TaskError))? // RecvError
            .map_err(err_str!(HandshakeManagerError::TaskError)) // TaskDriverError
    }
}
