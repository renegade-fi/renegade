//! Job types for the event manager, representing system events to be received &
//! exported by the event manager worker

use std::time::SystemTime;

use circuit_types::{
    fees::FeeTake,
    r#match::{ExternalMatchResult, MatchResult},
    transfers::ExternalTransfer,
    Amount,
};
use common::types::{
    chain::Chain,
    tasks::{HistoricalTask, TaskQueueKey},
    wallet::{Order, OrderIdentifier, WalletIdentifier},
    MatchingPoolName, TimestampedPrice,
};
use renegade_metrics::labels::NUM_EVENT_SEND_FAILURES_METRIC;
use serde::{Deserialize, Serialize};
use tokio::sync::mpsc::{error::SendError, unbounded_channel, UnboundedSender as TokioSender};
use util::metered_channels::MeteredTokioReceiver;
use uuid::Uuid;

// ---------------
// | Queue Types |
// ---------------

/// The name of the event manager queue, used to label queue length metrics
const EVENT_MANAGER_QUEUE_NAME: &str = "event_manager";

/// The queue sender type to send events to the event manager
pub type EventManagerQueue = TokioSender<RelayerEventType>;
/// The queue receiver type to receive events in the event manager
pub type EventManagerReceiver = MeteredTokioReceiver<RelayerEventType>;

/// Create a new event manager queue and receiver
pub fn new_event_manager_queue() -> (EventManagerQueue, EventManagerReceiver) {
    let (send, recv) = unbounded_channel();
    (send, MeteredTokioReceiver::new(recv, EVENT_MANAGER_QUEUE_NAME))
}

/// A helper for sending an event to the event manager queue, recording a
/// failure metric if the send fails
#[allow(clippy::result_large_err)]
pub fn try_send_event(
    event: RelayerEventType,
    queue: &EventManagerQueue,
) -> Result<(), SendError<RelayerEventType>> {
    let res = queue.send(event);
    if res.is_err() {
        metrics::counter!(NUM_EVENT_SEND_FAILURES_METRIC).increment(1);
    }
    res
}

// ------------------------
// | Top-level Event Type |
// ------------------------

/// A system event generated by the relayer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RelayerEvent {
    /// The metadata for the event
    pub meta: RelayerEventMetadata,

    /// The type of event
    pub event_type: RelayerEventType,
}

impl RelayerEvent {
    /// Create a new relayer event
    pub fn new(chain: Chain, event_type: RelayerEventType) -> Self {
        let meta = RelayerEventMetadata::new(chain);
        Self { meta, event_type }
    }

    /// Returns the ID of the wallet for which the event occurred
    pub fn wallet_id(&self) -> WalletIdentifier {
        self.event_type.wallet_id()
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        format!("{} ({})", self.event_type.describe(), self.meta.event_id)
    }
}

/// Metadata for a relayer event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RelayerEventMetadata {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,
    /// The chain on which the event occurred
    pub chain: Chain,
}

impl RelayerEventMetadata {
    /// Creates a new relayer event metadata
    pub fn new(chain: Chain) -> Self {
        let event_id = Uuid::new_v4();
        let event_timestamp = SystemTime::now();
        Self { event_id, event_timestamp, chain }
    }
}

/// An enum capturing all the different types of system events generated by the
/// relayer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum RelayerEventType {
    /// A wallet creation event
    WalletCreation(WalletCreationEvent),
    /// An external transfer event
    ExternalTransfer(ExternalTransferEvent),
    /// An order placement event
    OrderPlacement(OrderPlacementEvent),
    /// An order update event
    OrderUpdate(OrderUpdateEvent),
    /// An order cancellation event
    OrderCancellation(OrderCancellationEvent),
    /// A fill event
    Fill(FillEvent),
    /// An external fill event
    ExternalFill(ExternalFillEvent),
    /// A task completion
    TaskCompletion(TaskCompletionEvent),
}

impl RelayerEventType {
    /// Returns the ID of the wallet for which the event occurred
    pub fn wallet_id(&self) -> WalletIdentifier {
        match self {
            RelayerEventType::WalletCreation(event) => event.wallet_id,
            RelayerEventType::ExternalTransfer(event) => event.wallet_id,
            RelayerEventType::OrderPlacement(event) => event.wallet_id,
            RelayerEventType::OrderUpdate(event) => event.wallet_id,
            RelayerEventType::OrderCancellation(event) => event.wallet_id,
            RelayerEventType::Fill(event) => event.wallet_id,
            RelayerEventType::ExternalFill(event) => event.internal_wallet_id,
            RelayerEventType::TaskCompletion(event) => event.task_queue_key,
        }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        match self {
            RelayerEventType::WalletCreation(event) => event.describe(),
            RelayerEventType::ExternalTransfer(event) => event.describe(),
            RelayerEventType::OrderPlacement(event) => event.describe(),
            RelayerEventType::OrderUpdate(event) => event.describe(),
            RelayerEventType::OrderCancellation(event) => event.describe(),
            RelayerEventType::Fill(event) => event.describe(),
            RelayerEventType::ExternalFill(event) => event.describe(),
            RelayerEventType::TaskCompletion(event) => event.describe(),
        }
    }
}

// --------------------------
// | Individual Event Types |
// --------------------------

/// A wallet creation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WalletCreationEvent {
    /// The ID of the wallet that was created
    pub wallet_id: WalletIdentifier,
    /// The wallet's symmetric key, base64-encoded
    pub symmetric_key: String,
}

impl WalletCreationEvent {
    /// Creates a new wallet creation event
    pub fn new(wallet_id: WalletIdentifier, symmetric_key: String) -> Self {
        Self { wallet_id, symmetric_key }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "WalletCreation".to_string()
    }
}

/// An external transfer event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalTransferEvent {
    /// The ID of the wallet that made the transfer
    pub wallet_id: WalletIdentifier,
    /// The transfer that occurred
    pub transfer: ExternalTransfer,
}

impl ExternalTransferEvent {
    /// Creates a new external transfer event
    pub fn new(wallet_id: WalletIdentifier, transfer: ExternalTransfer) -> Self {
        Self { wallet_id, transfer }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "ExternalTransfer".to_string()
    }
}

/// An order placement event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderPlacementEvent {
    /// The ID of the wallet that placed the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was placed
    pub order_id: OrderIdentifier,
    /// The placed order
    pub order: Order,
    /// The matching pool to which the order was assigned
    pub matching_pool: MatchingPoolName,
}

impl OrderPlacementEvent {
    /// Creates a new order placement event
    pub fn new(
        wallet_id: WalletIdentifier,
        order_id: OrderIdentifier,
        order: Order,
        matching_pool: MatchingPoolName,
    ) -> Self {
        Self { wallet_id, order_id, order, matching_pool }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "OrderPlacement".to_string()
    }
}

/// An order update event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderUpdateEvent {
    /// The ID of the wallet that updated the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was updated
    pub order_id: OrderIdentifier,
    /// The updated order
    pub order: Order,
    /// The matching pool to which the order was assigned
    pub matching_pool: MatchingPoolName,
}

impl OrderUpdateEvent {
    /// Creates a new order update event
    pub fn new(
        wallet_id: WalletIdentifier,
        order_id: OrderIdentifier,
        order: Order,
        matching_pool: MatchingPoolName,
    ) -> Self {
        Self { wallet_id, order_id, order, matching_pool }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "OrderUpdate".to_string()
    }
}

/// An order cancellation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderCancellationEvent {
    /// The ID of the wallet that cancelled the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was cancelled
    pub order_id: OrderIdentifier,
    /// The cancelled order
    pub order: Order,
    /// The remaining amount of the base asset in the order
    pub amount_remaining: Amount,
    /// The filled amount of the base asset in the order
    pub amount_filled: Amount,
}

impl OrderCancellationEvent {
    /// Creates a new order cancellation event
    pub fn new(
        wallet_id: WalletIdentifier,
        order_id: OrderIdentifier,
        order: Order,
        amount_remaining: Amount,
        amount_filled: Amount,
    ) -> Self {
        Self { wallet_id, order_id, order, amount_remaining, amount_filled }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "OrderCancellation".to_string()
    }
}

/// A fill event on an order, resulting from an internal match
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FillEvent {
    /// The ID of the wallet containing the filled order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that received the fill
    pub order_id: OrderIdentifier,
    /// The price at which the fill was executed
    pub execution_price: TimestampedPrice,
    /// The match result
    pub match_result: MatchResult,
    /// The fees paid as a result of the fill
    pub fee_take: FeeTake,
}

impl FillEvent {
    /// Creates a new fill event
    pub fn new(
        wallet_id: WalletIdentifier,
        order_id: OrderIdentifier,
        execution_price: TimestampedPrice,
        match_result: MatchResult,
        fee_take: FeeTake,
    ) -> Self {
        Self { wallet_id, order_id, execution_price, match_result, fee_take }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "Fill".to_string()
    }
}

/// A fill event on an order, resulting from an external match
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalFillEvent {
    /// The ID of the internal wallet containing the filled order
    pub internal_wallet_id: WalletIdentifier,
    /// The ID of the internal order that received the fill
    pub internal_order_id: OrderIdentifier,
    /// The price at which the fill was executed
    pub execution_price: TimestampedPrice,
    /// The external match result
    pub external_match_result: ExternalMatchResult,
    /// The fees paid by the internal party as a result of the fill
    pub internal_fee_take: FeeTake,
}

impl ExternalFillEvent {
    /// Creates a new external fill event
    pub fn new(
        internal_wallet_id: WalletIdentifier,
        internal_order_id: OrderIdentifier,
        execution_price: TimestampedPrice,
        external_match_result: ExternalMatchResult,
        internal_fee_take: FeeTake,
    ) -> Self {
        Self {
            internal_wallet_id,
            internal_order_id,
            execution_price,
            external_match_result,
            internal_fee_take,
        }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "ExternalFill".to_string()
    }
}

/// A task completion event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TaskCompletionEvent {
    /// The key of the queue in which the task was executed
    pub task_queue_key: TaskQueueKey,
    /// The historical task that was completed
    pub historical_task: HistoricalTask,
}

impl TaskCompletionEvent {
    /// Creates a new task completion event
    pub fn new(task_queue_key: TaskQueueKey, historical_task: HistoricalTask) -> Self {
        Self { task_queue_key, historical_task }
    }

    /// Returns a human-readable description of the event
    pub fn describe(&self) -> String {
        "TaskCompletion".to_string()
    }
}
