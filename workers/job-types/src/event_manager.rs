//! Job types for the event manager, representing system events to be received &
//! exported by the event manager worker

use std::time::SystemTime;

use circuit_types::{
    r#match::{ExternalMatchResult, FeeTake, MatchResult},
    transfers::ExternalTransfer,
    Amount,
};
use common::types::{
    wallet::{Order, OrderIdentifier, WalletIdentifier},
    MatchingPoolName, TimestampedPrice,
};
use serde::{Deserialize, Serialize};
use tokio::sync::mpsc::{unbounded_channel, UnboundedSender as TokioSender};
use util::metered_channels::MeteredTokioReceiver;
use uuid::Uuid;

// ---------------
// | Queue Types |
// ---------------

/// The name of the event manager queue, used to label queue length metrics
const EVENT_MANAGER_QUEUE_NAME: &str = "event_manager";

/// The queue sender type to send events to the event manager
pub type EventManagerQueue = TokioSender<RelayerEvent>;
/// The queue receiver type to receive events in the event manager
pub type EventManagerReceiver = MeteredTokioReceiver<RelayerEvent>;

/// Create a new event manager queue and receiver
pub fn new_event_manager_queue() -> (EventManagerQueue, EventManagerReceiver) {
    let (send, recv) = unbounded_channel();
    (send, MeteredTokioReceiver::new(recv, EVENT_MANAGER_QUEUE_NAME))
}

// ------------------------
// | Top-level Event Enum |
// ------------------------

/// A system event generated by the relayer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum RelayerEvent {
    /// A wallet creation event
    WalletCreation(WalletCreationEvent),
    /// An external transfer event
    ExternalTransfer(ExternalTransferEvent),
    /// An order placement event
    OrderPlacement(OrderPlacementEvent),
    /// An order update event
    OrderUpdate(OrderUpdateEvent),
    /// An order cancellation event
    OrderCancellation(OrderCancellationEvent),
    /// A match event
    Match(MatchEvent),
    /// An external match event
    ExternalMatch(ExternalMatchEvent),
}

// --------------------------
// | Individual Event Types |
// --------------------------

/// A wallet creation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WalletCreationEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the wallet that was created
    pub wallet_id: WalletIdentifier,
    /// The wallet's symmetric key, base64-encoded
    pub symmetric_key: String,
}

/// An external transfer event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalTransferEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the wallet that made the transfer
    pub wallet_id: WalletIdentifier,
    /// The transfer that occurred
    pub transfer: ExternalTransfer,
}

/// An order placement event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderPlacementEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the wallet that placed the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was placed
    pub order_id: OrderIdentifier,
    /// The placed order
    pub order: Order,
    /// The matching pool to which the order was assigned
    pub matching_pool: MatchingPoolName,
}

/// An order update event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderUpdateEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the wallet that updated the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was updated
    pub order_id: OrderIdentifier,
    /// The updated order
    pub order: Order,
    /// The matching pool to which the order was assigned
    pub matching_pool: MatchingPoolName,
}

/// An order cancellation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderCancellationEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the wallet that cancelled the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was cancelled
    pub order_id: OrderIdentifier,
    /// The cancelled order
    pub order: Order,
    /// The remaining amount of the base asset in the order
    pub amount_remaining: Amount,
    /// The filled amount of the base asset in the order
    pub amount_filled: Amount,
}

/// A match event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MatchEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the first wallet in the match
    pub wallet_id0: WalletIdentifier,
    /// The ID of the second wallet in the match
    pub wallet_id1: WalletIdentifier,
    /// The ID of the first order in the match
    pub order_id0: OrderIdentifier,
    /// The ID of the second order in the match
    pub order_id1: OrderIdentifier,
    /// The price at which the match was executed
    pub execution_price: TimestampedPrice,
    /// The match result
    pub match_result: MatchResult,
    /// The fees paid on the base asset in this match
    pub base_fee_take: FeeTake,
    /// The fees paid on the quote asset in this match
    pub quote_fee_take: FeeTake,
}

/// An external match event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalMatchEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,

    /// The ID of the internal wallet in the match
    pub internal_wallet_id: WalletIdentifier,
    /// The ID of the internal wallet order in the match
    pub internal_order_id: OrderIdentifier,
    /// The price at which the match was executed
    pub execution_price: TimestampedPrice,
    /// The external match result
    pub external_match_result: ExternalMatchResult,
    /// The fees paid on the base asset in this match
    pub base_fee_take: FeeTake,
    /// The fees paid on the quote asset in this match
    pub quote_fee_take: FeeTake,
}
