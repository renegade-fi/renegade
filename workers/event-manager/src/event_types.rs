//! Type definitions for system events handled by the event manager.

use std::time::SystemTime;

use circuit_types::{
    r#match::{ExternalMatchResult, FeeTake, MatchResult},
    transfers::ExternalTransfer,
    Amount,
};
use common::types::wallet::{Order, OrderIdentifier, WalletIdentifier};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

// ----------------------------------
// | Top-level Event / Payload Type |
// ----------------------------------

/// A system event generated by the relayer
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RelayerEvent {
    /// The event ID
    pub event_id: Uuid,
    /// The time at which the event occurred
    pub event_timestamp: SystemTime,
    /// The event payload itself
    pub event: RelayerEventPayload,
}

/// The payload of a system event generated by the relayer.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "event_type")]
#[serde(rename_all = "snake_case")]
pub enum RelayerEventPayload {
    /// A wallet creation event
    WalletCreation(WalletCreationEvent),
    /// An external transfer event
    ExternalTransfer(ExternalTransferEvent),
    /// An order placement event
    OrderPlacement(OrderPlacementEvent),
    /// An order update event
    OrderUpdate(OrderUpdateEvent),
    /// An order cancellation event
    OrderCancellation(OrderCancellationEvent),
    /// A match event
    Match(MatchEvent),
    /// An external match event
    ExternalMatch(ExternalMatchEvent),
}

// --------------------------
// | Individual Event Types |
// --------------------------

/// A wallet creation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WalletCreationEvent {
    /// The ID of the wallet that was created
    pub wallet_id: WalletIdentifier,
}

/// An external transfer event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalTransferEvent {
    /// The ID of the wallet that made the transfer
    pub wallet_id: WalletIdentifier,
    /// The transfer that occurred
    pub transfer: ExternalTransfer,
}

/// An order placement event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderPlacementEvent {
    /// The ID of the wallet that placed the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was placed
    pub order_id: OrderIdentifier,
    /// The placed order
    pub order: Order,
}

/// An order update event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderUpdateEvent {
    /// The ID of the wallet that updated the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was updated
    pub order_id: OrderIdentifier,
    /// The updated order
    pub order: Order,
}

/// An order cancellation event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderCancellationEvent {
    /// The ID of the wallet that cancelled the order
    pub wallet_id: WalletIdentifier,
    /// The ID of the order that was cancelled
    pub order_id: OrderIdentifier,
    /// The cancelled order
    pub order: Order,
    /// The remaining amount of the base asset in the order
    pub amount_remaining: Amount,
    /// The filled amount of the base asset in the order
    pub amount_filled: Amount,
}

/// A match event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MatchEvent {
    /// The ID of the first wallet in the match
    pub wallet_id0: WalletIdentifier,
    /// The ID of the second wallet in the match
    pub wallet_id1: WalletIdentifier,
    /// The ID of the first order in the match
    pub order_id0: OrderIdentifier,
    /// The ID of the second order in the match
    pub order_id1: OrderIdentifier,
    /// The match result
    pub match_result: MatchResult,
    /// The fees paid on the base asset in this match
    pub base_fee_take: FeeTake,
    /// The fees paid on the quote asset in this match
    pub quote_fee_take: FeeTake,
}

/// An external match event
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExternalMatchEvent {
    /// The ID of the internal wallet in the match
    pub internal_wallet_id: WalletIdentifier,
    /// The ID of the internal wallet order in the match
    pub internal_order_id: OrderIdentifier,
    /// The external match result
    pub external_match_result: ExternalMatchResult,
    /// The fees paid on the base asset in this match
    pub base_fee_take: FeeTake,
    /// The fees paid on the quote asset in this match
    pub quote_fee_take: FeeTake,
}
